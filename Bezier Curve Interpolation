import numpy as np
import matplotlib.pyplot as plt  
import sympy as sp
from sympy import *
from sympy import Symbol
t = Symbol('t')
sig = []
import math
a_list =[]
b_list = []
use_ax = []
use_ay = []
use_bx = []
use_by = []
x0 =[]
y0 =[]

  
 
 
# find the a & b points
def get_bezier_coef(points):
    # since the formulas work given that we have n+1 points
    # then n must be this:
    n = len(points) - 1

    # build coefficents matrix
    C = 4 * np.identity(n)
    np.fill_diagonal(C[1:], 1)
    np.fill_diagonal(C[:, 1:], 1)
    C[0, 0] = 2
    C[n - 1, n - 1] = 7
    C[n - 1, n - 2] = 2

    # build points vector
    P = [2 * (2 * points[i] + points[i + 1]) for i in range(n)]
    P[0] = points[0] + 2 * points[1]
    P[n - 1] = 8 * points[n - 1] + points[n]

    # solve system, find a & b
    A = np.linalg.solve(C, P)
    B = [0] * n
    for i in range(n - 1):
        B[i] = 2 * points[i + 1] - A[i + 1]
    B[n - 1] = (A[n - 1] + points[n]) / 2
    a_list.append(A)
    b_list.append(B)
  
    return A, B

# returns the general Bezier cubic formula given 4 control points
def get_cubic(a, b, c, d):
    return lambda t: np.power(1 - t, 3) * a + 3 * np.power(1 - t, 2) * t * b + 3 * (1 - t) * np.power(t, 2) * c + np.power(t, 3) * d

# return one cubic curve for each consecutive points
  
def get_bezier_cubic(points):
    A, B = get_bezier_coef(points)
    
    
    
    return [
    get_cubic(points[i], A[i], B[i], points[i + 1])
    for i in range(len(points) - 1)]
   
     
    

# evalute each cubic curve on the range [0, 1] sliced in n points
def evaluate_bezier(points, n):
    curves = get_bezier_cubic(points)
    return np.array([fun(t) for fun in curves for t in np.linspace(0, 1, n)])

# generate 5 (or any number that you want) random points that we want to fit (or set them youreself)
points = []
'''for i in range(38):
  points.append([0, 0])
  points[i][0] = float(input(f"Enter the value of the x of point {i+1}: "))
  points[i][1] = float(input(f"Enter the value of the y of point {i+1}: "))'''

i = 0
for line in open("plswork.txt","r"):
    data = line.strip().split()
    points.append([0,0])
    points[i][0] = float(data[0])
    points[i][1] = float(data[1])
    i+=1

points = np.array(points)
# fit the points with Bezier interpolation
# use 50 points between each consecutive points to draw the curve
path = evaluate_bezier(points, 50)
# extract x & y coordinates of points
x, y = points[:,0], points[:,1]
px, py = path[:,0], path[:,1]




# getting all the a coordinates into separate lists of x and y
listac = a_list[0]
values = ""
for value in listac:
  values+= str(value)+""

values  = values.replace ("][","\n")
values = values.strip("[")
values = values.strip("]")
values = values.split()
#dividing the coordinates into all x and y coords as separate lists
for i in range (len(values)):
  coord = values[i]
  if i%2 == 0:
    use_ax.append(coord)
  else:
    use_ay.append(coord)


#get all the b coords separated using the same method, different names
listab = b_list[0]
valuesb = ""
for value in listab:
  valuesb+= str(value)+""
valuesb  = valuesb.replace ("][","\n")
valuesb = valuesb.strip("[")
valuesb = valuesb.strip("]")
valuesb = valuesb.strip("array")
valuesb = valuesb.split()
#splitting the values into separate list of all the x and y coordinates

for i in range (len(valuesb)):
  coord = valuesb[i]
  if i%2 == 0:
    use_bx.append(coord)
  else:
    use_by.append(coord)

# putting input coordinates into separate lists, of all x and y values
points1 = points
points1 = points1.tolist()
points1 = str(points1)
points1 = points1.split()



for i in range(len(points1)):
  list_item = str(points1[i])
  list_item = list_item.strip("[").strip("]").strip(",").strip(']')
  if i%2 ==0:
    x0.append(list_item)
  else:
    y0.append(list_item)

#defining the equation of  the cubic bezier curve, that interpolates a pair of points.
for i in range(len(y0)-3):
 xeqn = (float(x0[i]))*((1-(3*t))+ (3*(t**2)) - (t**3)) + (float(use_ax[i]))*(3*t -(6*(t**2))+ (3*(t**3)))+ (float(use_bx[i]))*((3*(t**2))-(3*(t**3))) + (float(x0[i+1]))*(t**3)
 yeqn = (float(y0[i]))*((1-(3*t))+ (3*(t**2)) - (t**3)) + (float(use_ay[i]))*(3*t -(6*(t**2))+ (3*(t**3)))+ (float(use_by[i]))*((3*(t**2))-(3*(t**3))) + (float(y0[i+1]))*(t**3)
 
 ys = simplify(yeqn)
 xs = simplify(xeqn)
 dx = sp.diff(xs,t)
 res = (math.pi)*(integrate((ys**2)*(dx), (t,0,1)))
 sig.append(res)
 print (f" The revolved volume for curve {i} is {res} ")
  
sig = np.array(sig)
sum  = sum(sig)
print(f" Sum of all is {sum}")
 
print(f'All coordinates of B are given{valuesb}')
print(a_list)
print(b_list)
# plot
plt.plot(px, py, 'b-',label = "Bezier Curves")
plt.plot(x, y, 'ro',label = 'Knot Points')
plt.legend(loc = "upper right")
plt.show()
